(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react'), require('@nivo/core'), require('@nivo/arcs'), require('@nivo/tooltip'), require('d3-hierarchy'), require('lodash/cloneDeep'), require('lodash/sortBy'), require('@nivo/colors')) :
  typeof define === 'function' && define.amd ? define(['exports', 'react', '@nivo/core', '@nivo/arcs', '@nivo/tooltip', 'd3-hierarchy', 'lodash/cloneDeep', 'lodash/sortBy', '@nivo/colors'], factory) :
  (global = global || self, factory(global.nivo = global.nivo || {}, global.React, global.nivo, global.nivo, global.nivo, global.d3, global['lodash/cloneDeep'], global['lodash/sortBy'], global.nivo));
}(this, (function (exports, React, core, arcs, tooltip, d3Hierarchy, cloneDeep, sortBy, colors) { 'use strict';

  var React__default = 'default' in React ? React['default'] : React;
  cloneDeep = cloneDeep && Object.prototype.hasOwnProperty.call(cloneDeep, 'default') ? cloneDeep['default'] : cloneDeep;
  sortBy = sortBy && Object.prototype.hasOwnProperty.call(sortBy, 'default') ? sortBy['default'] : sortBy;

  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }
    return target;
  }

  function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};
    var target = _objectWithoutPropertiesLoose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }
    return target;
  }

  var SunburstTooltip = function SunburstTooltip(_ref) {
    var id = _ref.id,
        formattedValue = _ref.formattedValue,
        color = _ref.color;
    return React__default.createElement(tooltip.BasicTooltip, {
      id: id,
      value: formattedValue,
      enableChip: true,
      color: color
    });
  };

  var defaultProps = {
    id: 'id',
    value: 'value',
    cornerRadius: 0,
    layers: ['arcs', 'arcLabels'],
    colors: {
      scheme: 'nivo'
    },
    colorBy: 'id',
    inheritColorFromParent: true,
    childColor: {
      from: 'color'
    },
    borderWidth: 1,
    borderColor: 'white',
    enableArcLabels: false,
    arcLabel: 'formattedValue',
    arcLabelsRadiusOffset: 0.5,
    arcLabelsSkipAngle: 0,
    arcLabelsTextColor: {
      theme: 'labels.text.fill'
    },
    animate: true,
    motionConfig: 'gentle',
    transitionMode: 'innerRadius',
    isInteractive: true,
    defs: [],
    fill: [],
    tooltip: SunburstTooltip,
    role: 'img'
  };

  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) {
      arr2[i] = arr[i];
    }
    return arr2;
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
  }

  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
  }

  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
  }

  var useSunburst = function useSunburst(_ref) {
    var data = _ref.data,
        _ref$id = _ref.id,
        id = _ref$id === void 0 ? defaultProps.id : _ref$id,
        _ref$value = _ref.value,
        value = _ref$value === void 0 ? defaultProps.value : _ref$value,
        valueFormat = _ref.valueFormat,
        radius = _ref.radius,
        _ref$cornerRadius = _ref.cornerRadius,
        cornerRadius = _ref$cornerRadius === void 0 ? defaultProps.cornerRadius : _ref$cornerRadius,
        _ref$colors = _ref.colors,
        colors$1 = _ref$colors === void 0 ? defaultProps.colors : _ref$colors,
        _ref$colorBy = _ref.colorBy,
        colorBy = _ref$colorBy === void 0 ? defaultProps.colorBy : _ref$colorBy,
        _ref$inheritColorFrom = _ref.inheritColorFromParent,
        inheritColorFromParent = _ref$inheritColorFrom === void 0 ? defaultProps.inheritColorFromParent : _ref$inheritColorFrom,
        _ref$childColor = _ref.childColor,
        childColor = _ref$childColor === void 0 ? defaultProps.childColor : _ref$childColor;
    var theme = core.useTheme();
    var getColor = colors.useOrdinalColorScale(colors$1, colorBy);
    var getChildColor = colors.useInheritedColor(childColor, theme);
    var getId = core.usePropertyAccessor(id);
    var getValue = core.usePropertyAccessor(value);
    var formatValue = core.useValueFormatter(valueFormat);
    var nodes = React.useMemo(function () {
      var _hierarchy$value;

      var clonedData = cloneDeep(data);
      var hierarchy = d3Hierarchy.hierarchy(clonedData).sum(getValue);
      var partition = d3Hierarchy.partition().size([2 * Math.PI, radius * radius]);
      var descendants = partition(hierarchy).descendants().slice(1);
      var total = (_hierarchy$value = hierarchy.value) !== null && _hierarchy$value !== void 0 ? _hierarchy$value : 0;
      var sortedNodes = sortBy(descendants, 'depth');
      return sortedNodes.reduce(function (acc, descendant) {
        var id = getId(descendant.data);
        var value = descendant.value;
        var percentage = 100 * value / total;
        var path = descendant.ancestors().map(function (ancestor) {
          return getId(ancestor.data);
        });
        var arc = {
          startAngle: descendant.x0,
          endAngle: descendant.x1,
          innerRadius: Math.sqrt(descendant.y0),
          outerRadius: Math.sqrt(descendant.y1)
        };
        var parent;

        if (descendant.parent) {
          parent = acc.find(function (node) {
            return node.id === getId(descendant.parent.data);
          });
        }

        var normalizedNode = {
          id: id,
          path: path,
          value: value,
          percentage: percentage,
          formattedValue: valueFormat ? formatValue(value) : "".concat(percentage.toFixed(2), "%"),
          color: '',
          arc: arc,
          data: descendant.data,
          depth: descendant.depth,
          height: descendant.height
        };

        if (inheritColorFromParent && parent && normalizedNode.depth > 1) {
          normalizedNode.color = getChildColor(parent);
        } else {
          normalizedNode.color = getColor(normalizedNode);
        }

        return [].concat(_toConsumableArray(acc), [normalizedNode]);
      }, []);
    }, [data, radius, getValue, getId, valueFormat, formatValue, getColor, inheritColorFromParent, getChildColor]);
    var arcGenerator = arcs.useArcGenerator({
      cornerRadius: cornerRadius
    });
    return {
      arcGenerator: arcGenerator,
      nodes: nodes
    };
  };
  var useSunburstLayerContext = function useSunburstLayerContext(_ref2) {
    var nodes = _ref2.nodes,
        arcGenerator = _ref2.arcGenerator,
        centerX = _ref2.centerX,
        centerY = _ref2.centerY,
        radius = _ref2.radius;
    return React.useMemo(function () {
      return {
        nodes: nodes,
        arcGenerator: arcGenerator,
        centerX: centerX,
        centerY: centerY,
        radius: radius
      };
    }, [nodes, arcGenerator, centerX, centerY, radius]);
  };

  var Arcs = function Arcs(_ref) {
    var center = _ref.center,
        data = _ref.data,
        arcGenerator = _ref.arcGenerator,
        borderWidth = _ref.borderWidth,
        borderColor = _ref.borderColor,
        isInteractive = _ref.isInteractive,
        onClick = _ref.onClick,
        onMouseEnter = _ref.onMouseEnter,
        onMouseMove = _ref.onMouseMove,
        onMouseLeave = _ref.onMouseLeave,
        tooltip$1 = _ref.tooltip,
        transitionMode = _ref.transitionMode;

    var _useTooltip = tooltip.useTooltip(),
        showTooltipFromEvent = _useTooltip.showTooltipFromEvent,
        hideTooltip = _useTooltip.hideTooltip;

    var handleClick = React.useMemo(function () {
      if (!isInteractive) return undefined;
      return function (datum, event) {
        onClick === null || onClick === void 0 ? void 0 : onClick(datum, event);
      };
    }, [isInteractive, onClick]);
    var handleMouseEnter = React.useMemo(function () {
      if (!isInteractive) return undefined;
      return function (datum, event) {
        showTooltipFromEvent(React.createElement(tooltip$1, datum), event);
        onMouseEnter === null || onMouseEnter === void 0 ? void 0 : onMouseEnter(datum, event);
      };
    }, [isInteractive, showTooltipFromEvent, tooltip$1, onMouseEnter]);
    var handleMouseMove = React.useMemo(function () {
      if (!isInteractive) return undefined;
      return function (datum, event) {
        showTooltipFromEvent(React.createElement(tooltip$1, datum), event);
        onMouseMove === null || onMouseMove === void 0 ? void 0 : onMouseMove(datum, event);
      };
    }, [isInteractive, showTooltipFromEvent, tooltip$1, onMouseMove]);
    var handleMouseLeave = React.useMemo(function () {
      if (!isInteractive) return undefined;
      return function (datum, event) {
        hideTooltip();
        onMouseLeave === null || onMouseLeave === void 0 ? void 0 : onMouseLeave(datum, event);
      };
    }, [isInteractive, hideTooltip, onMouseLeave]);
    return React__default.createElement(arcs.ArcsLayer, {
      center: center,
      data: data,
      arcGenerator: arcGenerator,
      borderWidth: borderWidth,
      borderColor: borderColor,
      transitionMode: transitionMode,
      onClick: handleClick,
      onMouseEnter: handleMouseEnter,
      onMouseMove: handleMouseMove,
      onMouseLeave: handleMouseLeave
    });
  };

  var InnerSunburst = function InnerSunburst(_ref) {
    var data = _ref.data,
        _ref$id = _ref.id,
        id = _ref$id === void 0 ? defaultProps.id : _ref$id,
        _ref$value = _ref.value,
        value = _ref$value === void 0 ? defaultProps.value : _ref$value,
        valueFormat = _ref.valueFormat,
        _ref$cornerRadius = _ref.cornerRadius,
        cornerRadius = _ref$cornerRadius === void 0 ? defaultProps.cornerRadius : _ref$cornerRadius,
        _ref$layers = _ref.layers,
        layers = _ref$layers === void 0 ? defaultProps.layers : _ref$layers,
        _ref$colors = _ref.colors,
        colors = _ref$colors === void 0 ? defaultProps.colors : _ref$colors,
        _ref$colorBy = _ref.colorBy,
        colorBy = _ref$colorBy === void 0 ? defaultProps.colorBy : _ref$colorBy,
        _ref$inheritColorFrom = _ref.inheritColorFromParent,
        inheritColorFromParent = _ref$inheritColorFrom === void 0 ? defaultProps.inheritColorFromParent : _ref$inheritColorFrom,
        _ref$childColor = _ref.childColor,
        childColor = _ref$childColor === void 0 ? defaultProps.childColor : _ref$childColor,
        _ref$borderWidth = _ref.borderWidth,
        borderWidth = _ref$borderWidth === void 0 ? defaultProps.borderWidth : _ref$borderWidth,
        _ref$borderColor = _ref.borderColor,
        borderColor = _ref$borderColor === void 0 ? defaultProps.borderColor : _ref$borderColor,
        partialMargin = _ref.margin,
        width = _ref.width,
        height = _ref.height,
        _ref$enableArcLabels = _ref.enableArcLabels,
        enableArcLabels = _ref$enableArcLabels === void 0 ? defaultProps.enableArcLabels : _ref$enableArcLabels,
        _ref$arcLabel = _ref.arcLabel,
        arcLabel = _ref$arcLabel === void 0 ? defaultProps.arcLabel : _ref$arcLabel,
        _ref$arcLabelsRadiusO = _ref.arcLabelsRadiusOffset,
        arcLabelsRadiusOffset = _ref$arcLabelsRadiusO === void 0 ? defaultProps.arcLabelsRadiusOffset : _ref$arcLabelsRadiusO,
        _ref$arcLabelsSkipAng = _ref.arcLabelsSkipAngle,
        arcLabelsSkipAngle = _ref$arcLabelsSkipAng === void 0 ? defaultProps.arcLabelsSkipAngle : _ref$arcLabelsSkipAng,
        _ref$arcLabelsTextCol = _ref.arcLabelsTextColor,
        arcLabelsTextColor = _ref$arcLabelsTextCol === void 0 ? defaultProps.arcLabelsTextColor : _ref$arcLabelsTextCol,
        arcLabelsComponent = _ref.arcLabelsComponent,
        _ref$defs = _ref.defs,
        defs = _ref$defs === void 0 ? defaultProps.defs : _ref$defs,
        _ref$fill = _ref.fill,
        fill = _ref$fill === void 0 ? defaultProps.fill : _ref$fill,
        _ref$transitionMode = _ref.transitionMode,
        transitionMode = _ref$transitionMode === void 0 ? defaultProps.transitionMode : _ref$transitionMode,
        _ref$isInteractive = _ref.isInteractive,
        isInteractive = _ref$isInteractive === void 0 ? defaultProps.isInteractive : _ref$isInteractive,
        onClick = _ref.onClick,
        onMouseEnter = _ref.onMouseEnter,
        onMouseLeave = _ref.onMouseLeave,
        onMouseMove = _ref.onMouseMove,
        _ref$tooltip = _ref.tooltip,
        tooltip = _ref$tooltip === void 0 ? defaultProps.tooltip : _ref$tooltip,
        _ref$role = _ref.role,
        role = _ref$role === void 0 ? defaultProps.role : _ref$role;

    var _useDimensions = core.useDimensions(width, height, partialMargin),
        innerHeight = _useDimensions.innerHeight,
        innerWidth = _useDimensions.innerWidth,
        margin = _useDimensions.margin,
        outerHeight = _useDimensions.outerHeight,
        outerWidth = _useDimensions.outerWidth;

    var _useMemo = React.useMemo(function () {
      var radius = Math.min(innerWidth, innerHeight) / 2;
      return {
        radius: radius,
        centerX: innerWidth / 2,
        centerY: innerHeight / 2
      };
    }, [innerHeight, innerWidth]),
        centerX = _useMemo.centerX,
        centerY = _useMemo.centerY,
        radius = _useMemo.radius;

    var _useSunburst = useSunburst({
      data: data,
      id: id,
      value: value,
      valueFormat: valueFormat,
      radius: radius,
      cornerRadius: cornerRadius,
      colors: colors,
      colorBy: colorBy,
      inheritColorFromParent: inheritColorFromParent,
      childColor: childColor
    }),
        arcGenerator = _useSunburst.arcGenerator,
        nodes = _useSunburst.nodes;

    var boundDefs = core.bindDefs(defs, nodes, fill, {
      dataKey: '.',
      colorKey: 'color',
      targetKey: 'fill'
    });
    var layerById = {
      arcs: null,
      arcLabels: null
    };

    if (layers.includes('arcs')) {
      layerById.arcs = React__default.createElement(Arcs, {
        key: "arcs",
        center: [centerX, centerY],
        data: nodes,
        arcGenerator: arcGenerator,
        borderWidth: borderWidth,
        borderColor: borderColor,
        transitionMode: transitionMode,
        isInteractive: isInteractive,
        tooltip: tooltip,
        onClick: onClick,
        onMouseEnter: onMouseEnter,
        onMouseLeave: onMouseLeave,
        onMouseMove: onMouseMove
      });
    }

    if (enableArcLabels && layers.includes('arcLabels')) {
      layerById.arcLabels = React__default.createElement(arcs.ArcLabelsLayer, {
        key: "arcLabels",
        center: [centerX, centerY],
        data: nodes,
        label: arcLabel,
        radiusOffset: arcLabelsRadiusOffset,
        skipAngle: arcLabelsSkipAngle,
        textColor: arcLabelsTextColor,
        transitionMode: transitionMode,
        component: arcLabelsComponent
      });
    }

    var layerContext = useSunburstLayerContext({
      nodes: nodes,
      arcGenerator: arcGenerator,
      centerX: centerX,
      centerY: centerY,
      radius: radius
    });
    return React__default.createElement(core.SvgWrapper, {
      width: outerWidth,
      height: outerHeight,
      defs: boundDefs,
      margin: margin,
      role: role
    }, layers.map(function (layer, i) {
      if (layerById[layer] !== undefined) {
        return layerById[layer];
      }

      if (typeof layer === 'function') {
        return React__default.createElement(React.Fragment, {
          key: i
        }, React.createElement(layer, layerContext));
      }

      return null;
    }));
  };

  var Sunburst = function Sunburst(_ref2) {
    var _ref2$isInteractive = _ref2.isInteractive,
        isInteractive = _ref2$isInteractive === void 0 ? defaultProps.isInteractive : _ref2$isInteractive,
        _ref2$animate = _ref2.animate,
        animate = _ref2$animate === void 0 ? defaultProps.animate : _ref2$animate,
        _ref2$motionConfig = _ref2.motionConfig,
        motionConfig = _ref2$motionConfig === void 0 ? defaultProps.motionConfig : _ref2$motionConfig,
        theme = _ref2.theme,
        otherProps = _objectWithoutProperties(_ref2, ["isInteractive", "animate", "motionConfig", "theme"]);

    return React__default.createElement(core.Container, {
      isInteractive: isInteractive,
      animate: animate,
      motionConfig: motionConfig,
      theme: theme
    }, React__default.createElement(InnerSunburst, Object.assign({
      isInteractive: isInteractive
    }, otherProps)));
  };

  var ResponsiveSunburst = function ResponsiveSunburst(props) {
    return React__default.createElement(core.ResponsiveWrapper, null, function (_ref) {
      var width = _ref.width,
          height = _ref.height;
      return React__default.createElement(Sunburst, Object.assign({
        width: width,
        height: height
      }, props));
    });
  };

  exports.ResponsiveSunburst = ResponsiveSunburst;
  exports.Sunburst = Sunburst;
  exports.defaultProps = defaultProps;
  exports.useSunburst = useSunburst;
  exports.useSunburstLayerContext = useSunburstLayerContext;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=nivo-sunburst.umd.js.map
